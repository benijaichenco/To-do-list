(()=>{"use strict";var e={};function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e){n(1,arguments);var a=Object.prototype.toString.call(e);return e instanceof Date||"object"===t(e)&&"[object Date]"===a?new Date(e.getTime()):"number"==typeof e||"[object Number]"===a?new Date(e):("string"!=typeof e&&"[object String]"!==a||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function r(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function o(e){n(1,arguments);var t=a(e),r=t.getUTCDay(),o=(r<1?7:0)+r-1;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function i(e){n(1,arguments);var t=a(e),r=t.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(r+1,0,4),i.setUTCHours(0,0,0,0);var s=o(i),c=new Date(0);c.setUTCFullYear(r,0,4),c.setUTCHours(0,0,0,0);var d=o(c);return t.getTime()>=s.getTime()?r+1:t.getTime()>=d.getTime()?r:r-1}e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var a=n.getElementsByTagName("script");if(a.length)for(var r=a.length-1;r>-1&&!t;)t=a[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();var s={};function c(){return s}function d(e,t){var o,i,s,d,u,l,m,h;n(1,arguments);var f=c(),p=r(null!==(o=null!==(i=null!==(s=null!==(d=null==t?void 0:t.weekStartsOn)&&void 0!==d?d:null==t||null===(u=t.locale)||void 0===u||null===(l=u.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==s?s:f.weekStartsOn)&&void 0!==i?i:null===(m=f.locale)||void 0===m||null===(h=m.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==o?o:0);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=a(e),g=v.getUTCDay(),b=(g<p?7:0)+g-p;return v.setUTCDate(v.getUTCDate()-b),v.setUTCHours(0,0,0,0),v}function u(e,t){var o,i,s,u,l,m,h,f;n(1,arguments);var p=a(e),v=p.getUTCFullYear(),g=c(),b=r(null!==(o=null!==(i=null!==(s=null!==(u=null==t?void 0:t.firstWeekContainsDate)&&void 0!==u?u:null==t||null===(l=t.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==s?s:g.firstWeekContainsDate)&&void 0!==i?i:null===(h=g.locale)||void 0===h||null===(f=h.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==o?o:1);if(!(b>=1&&b<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var w=new Date(0);w.setUTCFullYear(v+1,0,b),w.setUTCHours(0,0,0,0);var k=d(w,t),y=new Date(0);y.setUTCFullYear(v,0,b),y.setUTCHours(0,0,0,0);var T=d(y,t);return p.getTime()>=k.getTime()?v+1:p.getTime()>=T.getTime()?v:v-1}function l(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const m=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return l("yy"===t?a%100:a,t.length)},h=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):l(n+1,2)},f=function(e,t){return l(e.getUTCDate(),t.length)},p=function(e,t){return l(e.getUTCHours()%12||12,t.length)},v=function(e,t){return l(e.getUTCHours(),t.length)},g=function(e,t){return l(e.getUTCMinutes(),t.length)},b=function(e,t){return l(e.getUTCSeconds(),t.length)},w=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return l(Math.floor(a*Math.pow(10,n-3)),t.length)};var k={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return m(e,t)},Y:function(e,t,n,a){var r=u(e,a),o=r>0?r:1-r;return"YY"===t?l(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):l(o,t.length)},R:function(e,t){return l(i(e),t.length)},u:function(e,t){return l(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return l(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return l(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return h(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return l(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,o,i){var s=function(e,t){n(1,arguments);var o=a(e),i=d(o,t).getTime()-function(e,t){var a,o,i,s,l,m,h,f;n(1,arguments);var p=c(),v=r(null!==(a=null!==(o=null!==(i=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(l=t.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:p.firstWeekContainsDate)&&void 0!==o?o:null===(h=p.locale)||void 0===h||null===(f=h.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==a?a:1),g=u(e,t),b=new Date(0);return b.setUTCFullYear(g,0,v),b.setUTCHours(0,0,0,0),d(b,t)}(o,t).getTime();return Math.round(i/6048e5)+1}(e,i);return"wo"===t?o.ordinalNumber(s,{unit:"week"}):l(s,t.length)},I:function(e,t,r){var s=function(e){n(1,arguments);var t=a(e),r=o(t).getTime()-function(e){n(1,arguments);var t=i(e),a=new Date(0);return a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0),o(a)}(t).getTime();return Math.round(r/6048e5)+1}(e);return"Io"===t?r.ordinalNumber(s,{unit:"week"}):l(s,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):f(e,t)},D:function(e,t,r){var o=function(e){n(1,arguments);var t=a(e),r=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=r-t.getTime();return Math.floor(o/864e5)+1}(e);return"Do"===t?r.ordinalNumber(o,{unit:"dayOfYear"}):l(o,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return l(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return l(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return l(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return p(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):v(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):l(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):l(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):g(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):b(e,t)},S:function(e,t){return w(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return T(r);case"XXXX":case"XX":return L(r);default:return L(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return T(r);case"xxxx":case"xx":return L(r);default:return L(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+y(r,":");default:return"GMT"+L(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+y(r,":");default:return"GMT"+L(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return l(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return l((a._originalDate||e).getTime(),t.length)}};function y(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),o=a%60;if(0===o)return n+String(r);var i=t||"";return n+String(r)+i+l(o,2)}function T(e,t){return e%60==0?(e>0?"-":"+")+l(Math.abs(e)/60,2):L(e,t)}function L(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+l(Math.floor(r/60),2)+n+l(r%60,2)}const j=k;var C=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},P=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},S={p:P,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],r=a[1],o=a[2];if(!o)return C(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",C(r,t)).replace("{{time}}",P(o,t))}};const E=S;var x=["D","DD"],D=["YY","YYYY"];function M(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var O={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function q(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}var N,U={date:q({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:q({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:q({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},W={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function A(e){return function(t,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,o=null!=n&&n.width?String(n.width):r;a=e.formattingValues[o]||e.formattingValues[r]}else{var i=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;a=e.values[s]||e.values[i]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function Y(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],o=t.match(r);if(!o)return null;var i,s=o[0],c=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(c)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(c):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(c);return i=e.valueCallback?e.valueCallback(d):d,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(s.length)}}}const H={code:"en-US",formatDistance:function(e,t,n){var a,r=O[e];return a="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:U,formatRelative:function(e,t,n,a){return W[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:A({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:A({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:A({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:A({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:A({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(N={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(N.matchPattern);if(!n)return null;var a=n[0],r=e.match(N.parsePattern);if(!r)return null;var o=N.valueCallback?N.valueCallback(r[0]):r[0];return{value:o=t.valueCallback?t.valueCallback(o):o,rest:e.slice(a.length)}}),era:Y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var F=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,I=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,z=/^'([^]*?)'?$/,B=/''/g,J=/[a-zA-Z]/;function Q(e,o,i){var s,d,u,l,m,h,f,p,v,g,b,w,k,y,T,L,C,P;n(2,arguments);var S=String(o),O=c(),q=null!==(s=null!==(d=null==i?void 0:i.locale)&&void 0!==d?d:O.locale)&&void 0!==s?s:H,N=r(null!==(u=null!==(l=null!==(m=null!==(h=null==i?void 0:i.firstWeekContainsDate)&&void 0!==h?h:null==i||null===(f=i.locale)||void 0===f||null===(p=f.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==m?m:O.firstWeekContainsDate)&&void 0!==l?l:null===(v=O.locale)||void 0===v||null===(g=v.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==u?u:1);if(!(N>=1&&N<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var U=r(null!==(b=null!==(w=null!==(k=null!==(y=null==i?void 0:i.weekStartsOn)&&void 0!==y?y:null==i||null===(T=i.locale)||void 0===T||null===(L=T.options)||void 0===L?void 0:L.weekStartsOn)&&void 0!==k?k:O.weekStartsOn)&&void 0!==w?w:null===(C=O.locale)||void 0===C||null===(P=C.options)||void 0===P?void 0:P.weekStartsOn)&&void 0!==b?b:0);if(!(U>=0&&U<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!q.localize)throw new RangeError("locale must contain localize property");if(!q.formatLong)throw new RangeError("locale must contain formatLong property");var W=a(e);if(!function(e){if(n(1,arguments),!function(e){return n(1,arguments),e instanceof Date||"object"===t(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var r=a(e);return!isNaN(Number(r))}(W))throw new RangeError("Invalid time value");var A=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(W),Y=function(e,t){return n(2,arguments),function(e,t){n(2,arguments);var o=a(e).getTime(),i=r(t);return new Date(o+i)}(e,-r(t))}(W,A),Q={firstWeekContainsDate:N,weekStartsOn:U,locale:q,_originalDate:W};return S.match(I).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,E[t])(e,q.formatLong):e})).join("").match(F).map((function(t){if("''"===t)return"'";var n,a,r=t[0];if("'"===r)return(a=(n=t).match(z))?a[1].replace(B,"'"):n;var s,c=j[r];if(c)return null!=i&&i.useAdditionalWeekYearTokens||(s=t,-1===D.indexOf(s))||M(t,o,String(e)),null!=i&&i.useAdditionalDayOfYearTokens||!function(e){return-1!==x.indexOf(e)}(t)||M(t,o,String(e)),c(Y,t,q.localize,Q);if(r.match(J))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("")}class G{constructor(e,t,n,a,r){this.title=e,this.description=t,this.date=n,this.project=a,this.completed=r}}class X{constructor(e){this.projectTitle=e,this.taskList=[]}addTask(e,t,n,a,r){const o=new G(e,t,n,a,r);this.taskList.push(o)}}class R{constructor(){this.defaultProjects=[new X("Inbox"),new X("Today"),new X("This week")],this.userProjects=[]}addProject(e){const t=new X(e);this.userProjects.push(t)}}const $=e.p+"32652151fd21e0530073.png",_=e.p+"bdfe81ee4445a0ecf092.png",V=e.p+"939f2a757e3335be71bb.svg",K=e.p+"233385e32206cd372d69.svg",Z=e.p+"518ff47ec29e1552eabd.svg",ee=e.p+"378dacad5886df7eb57d.svg",te=e.p+"bcf8d6ff346603c8a51a.svg";class ne{static loadHomePage(){ne.createContainerObject(),ne.createStorage(),ne.createProjectForm(),ne.createTaskForm(),ne.createHeader(),ne.createContent(),ne.loadInbox()}static createContainerObject(){const e=new R;ne.containerObject=e}static createStorage(){localStorage.getItem("inbox")||(localStorage.setItem("inbox",JSON.stringify(ne.containerObject.defaultProjects[0].taskList)),console.log("yes"));const e=JSON.parse(localStorage.getItem("inbox"));ne.containerObject.defaultProjects[0].taskList=e,localStorage.getItem("projects")||localStorage.setItem("projects",JSON.stringify([]));const t=JSON.parse(localStorage.getItem("projects"));if(t.length>0)for(let e=0;e<t.length;e++)ne.containerObject.addProject(t[e].projectTitle),ne.containerObject.userProjects[e].taskList=t[e].taskList}static createHeader(){const e=document.body,t=document.createElement("div");t.classList.add("wrapper"),e.appendChild(t);const n=document.createElement("header");n.classList.add("header"),t.appendChild(n);const a=document.createElement("div");a.classList.add("header-left"),n.appendChild(a);const r=document.createElement("button");r.classList.add("logo-button"),a.appendChild(r);const o=document.createElement("img");o.classList.add("logo"),o.setAttribute("src",$),r.appendChild(o);const i=document.createElement("h1");i.classList.add("logo-text"),i.textContent="ToDo",r.appendChild(i);const s=document.createElement("div");s.classList.add("header-right"),n.appendChild(s);const c=document.createElement("button");c.classList.add("add-project"),c.removeEventListener("click",ne.addProject),c.addEventListener("click",ne.addProject),s.appendChild(c);const d=document.createElement("div");d.classList.add("add-project-btn-text-container"),c.appendChild(d);const u=document.createElement("div");u.classList.add("add-project-btn-text"),u.textContent="Add Project",d.appendChild(u);const l=document.createElement("span");l.classList.add("plus-sign"),c.appendChild(l);const m=document.createElement("img");m.classList.add("add-project-img"),m.setAttribute("src",_),l.appendChild(m)}static createContent(){const e=document.querySelector(".wrapper"),t=document.createElement("div");t.classList.add("content"),e.appendChild(t),function(){const e=document.querySelector(".content"),t=document.createElement("div");t.classList.add("sidebar"),e.appendChild(t);const n=document.createElement("div");n.classList.add("default-projects"),t.appendChild(n);const a=document.createElement("div");a.classList.add("user-projects"),t.appendChild(a),function(){const e=document.querySelector(".default-projects");for(let t of ne.containerObject.defaultProjects){const n=document.createElement("button");n.setAttribute("id","default"),n.classList.add("sidebar-default-project"),n.classList.add(t.projectTitle.replace(/\s/g,"-").toLowerCase()),e.appendChild(n);const a=document.createElement("div");a.classList.add("sidebar-project-icon"),n.appendChild(a);const r=document.createElement("img");a.appendChild(r);const o=document.createElement("div");o.classList.add("sidebar-project-title"),o.textContent=`${t.projectTitle}`,n.appendChild(o)}const t=document.querySelector(".sidebar-default-project.inbox");t.removeEventListener("click",ne.getTaskList),t.addEventListener("click",ne.getTaskList);const n=document.querySelector(".sidebar-default-project.today");n.removeEventListener("click",ne.getTodayTasks),n.addEventListener("click",ne.getTodayTasks);const a=document.querySelector(".sidebar-default-project.this-week");a.removeEventListener("click",ne.getThisWeekTasks),a.addEventListener("click",ne.getThisWeekTasks),document.querySelector(".default-projects .inbox img").setAttribute("src",V),document.querySelector(".default-projects .today img").setAttribute("src",K),document.querySelector(".default-projects .this-week img").setAttribute("src",Z)}(),ne.updateUserProjectButtons()}(),function(){const e=document.querySelector(".content"),t=document.createElement("div");t.classList.add("main"),e.appendChild(t);const n=document.createElement("div");n.classList.add("current-project-title"),t.appendChild(n);const a=document.createElement("div");a.classList.add("add-task-button-container"),a.classList.add("active"),t.appendChild(a);const r=document.createElement("button");r.classList.add("add-task-button"),r.removeEventListener("click",ne.addTask),r.addEventListener("click",ne.addTask),a.appendChild(r);const o=document.createElement("span");o.classList.add("add-task-icon"),r.appendChild(o);const i=document.createElement("img");i.setAttribute("src",ee),o.appendChild(i);const s=document.createElement("div");s.classList.add("add-task-text-container"),r.appendChild(s);const c=document.createElement("div");c.classList.add("add-task-button-text"),c.textContent="Add Task",s.appendChild(c);const d=document.createElement("div");d.classList.add("tasks-container"),t.appendChild(d)}()}static createProjectForm(){const e=document.body,t=document.createElement("div");t.classList.add("project-form-layout"),t.removeEventListener("click",(()=>{n.classList.remove("rendered"),n.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active")})),t.addEventListener("click",(()=>{n.classList.remove("rendered"),n.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active")})),e.appendChild(t);const n=document.createElement("form");n.classList.add("project-form"),n.setAttribute("action","#"),n.setAttribute("method","get"),n.removeEventListener("submit",(e=>{e.preventDefault()})),n.addEventListener("submit",(e=>{e.preventDefault()})),e.appendChild(n);const a=document.createElement("input");a.classList.add("project-title-input"),a.setAttribute("type","text"),a.setAttribute("placeholder","Project Title"),a.setAttribute("maxlength","15"),n.appendChild(a);const r=document.createElement("button");r.removeEventListener("click",ne.submitProject),r.addEventListener("click",ne.submitProject),r.setAttribute("type","submit"),r.classList.add("submit-project-button"),r.textContent="Create",n.appendChild(r)}static submitProject(){const e=document.querySelector(".project-form"),t=document.querySelector(".project-form-layout");e.classList.remove("rendered"),e.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active");const n=document.querySelector(".project-title-input"),a=n.value;if(ne.containerObject.userProjects.find((e=>e.projectTitle===a)))return alert("Name already used"),void ne.addProject();if(null===a||""===a)return;ne.containerObject.addProject(a);const r=ne.containerObject.userProjects.find((e=>e.projectTitle===a));n.value="";const o=JSON.parse(localStorage.getItem("projects"));o.push(r),localStorage.setItem("projects",JSON.stringify(o)),ne.updateUserProjectButtons()}static addProject(){const e=document.querySelector(".project-form");e.classList.add("rendered");const t=document.querySelector(".project-form-layout");t.classList.add("rendered"),setTimeout((function(){e.classList.add("active"),t.classList.add("active")}),1),document.querySelector(".project-title-input").focus()}static updateUserProjectButtons(){const e=document.querySelector(".user-projects");e.innerHTML="";const t=ne.containerObject.userProjects;for(let n of t){const t=document.createElement("div");t.classList.add("user-project-container"),e.appendChild(t);const a=document.createElement("div");a.classList.add("user-project-left"),t.appendChild(a);const r=document.createElement("button");r.classList.add("user-project-button"),r.removeEventListener("click",ne.getTaskList),r.addEventListener("click",ne.getTaskList),a.appendChild(r);const o=document.createElement("div");o.classList.add("user-project-dot"),r.appendChild(o);const i=document.createElement("div");i.classList.add("user-project-title"),i.textContent=n.projectTitle,r.appendChild(i);const s=document.createElement("div");s.classList.add("user-project-right"),t.appendChild(s);const c=document.createElement("button");c.classList.add("delete-project"),c.textContent="🞬",c.removeEventListener("click",ne.deleteProject),c.addEventListener("click",ne.deleteProject),s.appendChild(c)}}static deleteProject(e){const t=e.target.parentNode.parentNode.textContent.slice(0,-2),n=ne.containerObject.userProjects.find((e=>e.projectTitle===t)),a=ne.containerObject.userProjects.indexOf(n);if("delete"===prompt("Type 'delete' to delete project:","")){ne.containerObject.userProjects.splice(a,1);const e=JSON.parse(localStorage.getItem("projects"));e.splice(a,1),localStorage.setItem("projects",JSON.stringify(e)),ne.updateUserProjectButtons(),ne.findProject.projectTitle===t&&ne.loadInbox()}}static createTaskForm(){const e=document.body,t=document.createElement("div");t.classList.add("task-form-layout"),t.removeEventListener("click",(()=>{n.classList.remove("rendered"),n.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active")})),t.addEventListener("click",(()=>{n.classList.remove("rendered"),n.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active")})),e.appendChild(t);const n=document.createElement("form");n.classList.add("task-form"),n.setAttribute("action","#"),n.setAttribute("method","get"),n.removeEventListener("submit",(e=>{e.preventDefault()})),n.addEventListener("submit",(e=>{e.preventDefault()})),e.appendChild(n);const a=document.createElement("input");a.classList.add("task-title-input"),a.setAttribute("type","text"),a.setAttribute("maxlength","15"),a.setAttribute("placeholder","Task Title"),n.appendChild(a);const r=document.createElement("textarea");r.classList.add("task-description-input"),r.setAttribute("placeholder","Description.."),n.appendChild(r);const o=document.createElement("button");o.classList.add("submit-task-button"),o.setAttribute("type","submit"),o.textContent="Add Task",o.removeEventListener("click",ne.submitTask),o.addEventListener("click",ne.submitTask),n.appendChild(o)}static submitTask(){const e=document.querySelector(".task-form"),t=document.querySelector(".task-form-layout");e.classList.remove("rendered"),e.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active");const n=document.querySelector(".task-title-input").value;if(null===n||""===n)return alert("Please fill a title"),void ne.addTask();if(n.length>15)return alert("Name too long, max length is 15 characters"),void ne.addTask();const a=document.querySelector(".task-description-input").value;let r=Q(new Date,"PP"),o=ne.findProject.projectTitle;ne.findProject.addTask(n,a,r,o,"no"),ne.checkWeek(r)&&ne.containerObject.defaultProjects[2].addTask(n,a,r,o,"no"),document.querySelector(".task-title-input").value="",document.querySelector(".task-description-input").value="",ne.updateTaskList(),ne.updateUserProjectButtons()}static getTaskList(e){const t=document.querySelector(".add-task-button-container");t.classList.contains("active")||t.classList.add("active");const n=e.currentTarget.parentNode.parentNode.classList.value,a=ne.containerObject.userProjects,r=ne.containerObject.defaultProjects;let o,i,s;o=n.includes("user")?a:r,o===a?(i=e.currentTarget.parentNode.parentNode.textContent,s=i.slice(0,-2)):s=e.currentTarget.textContent,ne.findProject=o.find((e=>e.projectTitle===s)),ne.updateTaskList()}static updateTaskList(){const e=ne.findProject.taskList;e.sort(ne.compareDates),document.querySelector(".current-project-title").textContent=ne.findProject.projectTitle;const t=document.querySelector(".tasks-container");t.innerHTML="";for(let n of e){const e=document.createElement("div");e.removeEventListener("click",ne.expandTask),e.addEventListener("click",ne.expandTask),e.classList.add("task"),t.appendChild(e);const a=document.createElement("div");a.classList.add("task-left"),e.appendChild(a);const r=document.createElement("input");r.classList.add("mark-task-complete"),r.setAttribute("type","checkbox"),r.setAttribute("id",`${n.title.replace(/\s/g,"")}`),"yes"===n.completed&&r.setAttribute("checked",""),r.removeEventListener("change",ne.completeTask),r.addEventListener("change",ne.completeTask),a.appendChild(r);const o=document.createElement("label");o.classList.add("task-title"),o.setAttribute("for",`${n.title.replace(/\s/g,"")}`),o.textContent=n.title,a.appendChild(o);const i=document.createElement("div");i.classList.add("task-description"),i.textContent=n.description,e.appendChild(i);const s=document.createElement("div");s.classList.add("task-right"),e.appendChild(s);const c=document.createElement("input");c.classList.add("task-date"),c.value=n.date,c.setAttribute("type","date");let d=(new Date).toISOString().split("T")[0];c.setAttribute("min",d),c.removeEventListener("change",ne.chooseDate),c.addEventListener("change",ne.chooseDate),s.appendChild(c);const u=document.createElement("button");u.removeEventListener("click",ne.deleteTask),u.addEventListener("click",ne.deleteTask),u.classList.add("delete-task-button"),s.appendChild(u);const l=document.createElement("img");l.setAttribute("src",te),u.appendChild(l),"yes"===n.completed&&(e.classList.add("complete"),r.classList.add("active"))}localStorage.setItem("inbox",JSON.stringify(ne.containerObject.defaultProjects[0].taskList)),localStorage.setItem("projects",JSON.stringify(ne.containerObject.userProjects))}static completeTask(e){const t=e.target,n=e.target.parentNode.parentNode,a=n.querySelector(".task-title").textContent,r=ne.findProject.taskList.find((e=>e.title===a));t.checked?(console.log(r),console.log(t.checked+" checked!"),t.checked=!0,n.classList.add("complete"),r.completed="yes"):(console.log(t.checked+" unchecked!"),n.classList.remove("complete"),r.completed="no")}static expandTask(e){if("task-description"===e.target.classList.value){const t=e.target.parentNode,n=t.querySelector(".task-title"),a=t.querySelector(".task-description");t.classList.add("active"),n.classList.add("active"),a.classList.add("active")}else if("task-description active"===e.target.classList.value){const t=e.target.parentNode,n=t.querySelector(".task-title"),a=t.querySelector(".task-description");t.classList.remove("active"),n.classList.remove("active"),a.classList.remove("active")}}static addTask(){const e=document.querySelector(".task-form");e.classList.add("rendered");const t=document.querySelector(".task-form-layout");t.classList.add("rendered"),setTimeout((function(){e.classList.add("active"),t.classList.add("active")}),1),document.querySelector(".task-title-input").focus()}static chooseDate(e){console.log(e.target.parentNode.parentNode),console.log(e.target.value);const t=e.target.parentNode.parentNode.querySelector(".task-title").textContent,n=ne.findProject.taskList.find((e=>e.title===t));n.date=e.target.value,console.log(n),ne.updateTaskList()}static checkToday(e){if(Q(new Date(e),"P")===Q(new Date,"P"))return!0}static compareDates(e,t){const n=new Date(e.date),a=new Date(t.date);return n>a?1:n<a?-1:0}static getTodayTasks(){const e=document.querySelector(".add-task-button-container");e.classList.contains("active")&&e.classList.remove("active");const t=[],n=ne.containerObject.defaultProjects[0].taskList,a=ne.containerObject.userProjects;for(let e of a)e.taskList.forEach((e=>{ne.checkToday(e.date)&&t.push(e)}));n.forEach((e=>{ne.checkToday(e.date)&&t.push(e)})),ne.containerObject.defaultProjects[1].taskList=t,ne.findProject=ne.containerObject.defaultProjects[1],ne.updateTaskList()}static checkWeek(e){const t=Q(new Date(e),"P"),o=Q(function(e,t){var o,i,s,d,u,l,m,h;n(1,arguments);var f=c(),p=r(null!==(o=null!==(i=null!==(s=null!==(d=null==t?void 0:t.weekStartsOn)&&void 0!==d?d:null==t||null===(u=t.locale)||void 0===u||null===(l=u.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==s?s:f.weekStartsOn)&&void 0!==i?i:null===(m=f.locale)||void 0===m||null===(h=m.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==o?o:0);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=a(e),g=v.getDay(),b=(g<p?7:0)+g-p;return v.setDate(v.getDate()-b),v.setHours(0,0,0,0),v}(new Date),"P"),i=function(e,t){return n(2,arguments),function(e,t){n(2,arguments);var o=a(e),i=r(t);return isNaN(i)?new Date(NaN):i?(o.setDate(o.getDate()+i),o):o}(e,7*r(t))}(new Date(o),1),s=function(e,t){n(2,arguments);var r=a(e),o=a(t);return r.getTime()>o.getTime()}(new Date(i),new Date(t)),d=function(e,t){n(2,arguments);var r=a(e),o=a(t);return r.getTime()<o.getTime()}(new Date(t),new Date(o));if(!0===s&&!1===d)return!0}static getThisWeekTasks(){const e=document.querySelector(".add-task-button-container");e.classList.contains("active")&&e.classList.remove("active");const t=[],n=ne.containerObject.defaultProjects[0].taskList,a=ne.containerObject.userProjects;for(let e of a)e.taskList.forEach((e=>{ne.checkWeek(e.date)&&t.push(e)}));n.forEach((e=>{ne.checkWeek(e.date)&&t.push(e)})),t.sort(ne.compareDates),ne.containerObject.defaultProjects[2].taskList=t,ne.findProject=ne.containerObject.defaultProjects[2],ne.updateTaskList()}static deleteTask(e){const t=e.currentTarget.parentNode.parentNode.querySelector(".task-title").textContent,n=ne.findProject.taskList.find((e=>e.title===t)),a=ne.findProject.taskList.indexOf(n),r=ne.findProject.taskList[a].project;if("Inbox"===r){if("delete"!==prompt('Type "delete" to delete this task',""))return;ne.containerObject.defaultProjects[0].taskList.splice(a,1)}else"delete"===prompt('Type "delete" to delete this task',"")&&(ne.containerObject.defaultProjects[0].taskList.splice(a,1),ne.containerObject.userProjects.find((e=>e.projectTitle===r)).taskList.splice(a,1));"This week"!==ne.findProject.projectTitle&&"Today"!==ne.findProject.projectTitle||ne.findProject.taskList.splice(a,1),ne.updateTaskList()}static loadInbox(){ne.findProject=ne.containerObject.defaultProjects[0],ne.updateTaskList()}}document.addEventListener("DOMContentLoaded",ne.loadHomePage)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,