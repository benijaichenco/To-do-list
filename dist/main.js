(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);"]),i.push([e.id,'* {\r\n  font-family: "Roboto", sans-serif;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  height: 100vh;\r\n}\r\n\r\n.project-form-layout,\r\n.project-form,\r\n.task-form-layout,\r\n.task-form {\r\n  transition: all 0.2s ease-in-out;\r\n  display: none;\r\n}\r\n\r\n.project-form-layout.rendered {\r\n  z-index: 1;\r\n  display: block;\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  backdrop-filter: blur(5px);\r\n  opacity: 0;\r\n}\r\n\r\n.project-form-layout.active {\r\n  opacity: 1;\r\n}\r\n\r\n.project-form.rendered {\r\n  z-index: 2;\r\n  position: absolute;\r\n  top: 20%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%) scale(0);\r\n  background-color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 5px;\r\n  box-shadow: 0 0 5px 0 grey;\r\n  border-radius: 15px;\r\n  height: 90px;\r\n  width: 265px;\r\n  padding: 10px 20px;\r\n}\r\n\r\n.project-form.active {\r\n  transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n.project-form input[type="text"] {\r\n  text-align: center;\r\n  border: none;\r\n  height: 30px;\r\n  font-size: 1rem;\r\n  width: 100%;\r\n  outline: none;\r\n}\r\n\r\n.project-form input[type="text"]:focus::placeholder,\r\n.task-form input[type="text"]:focus::placeholder,\r\n.task-form textarea:focus::placeholder {\r\n  color: transparent;\r\n}\r\n\r\n.project-form button,\r\n.task-form button {\r\n  transition: all 0.1s ease-in-out;\r\n  border: none;\r\n  font-size: 1rem;\r\n  background: rgb(234, 234, 234);\r\n  color: rgb(124, 124, 124);\r\n  border-radius: 50px;\r\n  padding: 5px 15px;\r\n}\r\n\r\n.project-form button:hover,\r\n.task-form button:hover {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.task-form-layout.rendered {\r\n  z-index: 1;\r\n  display: block;\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  backdrop-filter: blur(5px);\r\n  opacity: 0;\r\n}\r\n\r\n.task-form-layout.active {\r\n  opacity: 1;\r\n}\r\n\r\n.task-form.rendered {\r\n  z-index: 2;\r\n  position: absolute;\r\n  top: 20%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%) scale(0);\r\n  background-color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 10px;\r\n  box-shadow: 0 0 5px 0 grey;\r\n  border-radius: 15px;\r\n  height: 200px;\r\n  width: 290px;\r\n  padding: 15px;\r\n}\r\n\r\n.task-form.active {\r\n  transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n.task-form input[type="text"] {\r\n  width: 100%;\r\n  height: 2.5rem;\r\n  margin: 0;\r\n  padding: 0 10px;\r\n  border-radius: 10px;\r\n  font-size: 1rem;\r\n  text-align: center;\r\n  border: none;\r\n  outline: none;\r\n}\r\n\r\n.task-form textarea {\r\n  flex-grow: 1;\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 5px;\r\n  resize: none;\r\n  border-radius: 10px;\r\n  font-size: 0.9rem;\r\n  border: none;\r\n  outline: none;\r\n  text-align: center;\r\n}\r\n\r\n.wrapper {\r\n  box-shadow: 0 0 15px 1px rgb(189, 189, 189);\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-width: 1100px;\r\n  margin-inline: auto;\r\n}\r\n\r\n/* header: */\r\n.header {\r\n  padding: 0 15px;\r\n  height: 60px;\r\n  background-color: rgb(58, 58, 58);\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.logo-button {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 8px;\r\n  background-color: transparent;\r\n  border: none;\r\n}\r\n\r\n.logo-button h1 {\r\n  color: rgb(238, 238, 238);\r\n  font-size: 1.6rem;\r\n  margin: 0;\r\n}\r\n\r\n.header-left img {\r\n  height: 32px;\r\n}\r\n\r\n.add-project {\r\n  border: none;\r\n  transition: 0.3s ease-in-out;\r\n  background-color: transparent;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.add-project-btn-text-container {\r\n  overflow: hidden;\r\n}\r\n\r\n.add-project-btn-text {\r\n  padding-right: 8px;\r\n  transition: 0.3s ease-in-out;\r\n  font-size: 1rem;\r\n  color: rgb(238, 238, 238);\r\n  transform: translateX(20%);\r\n  opacity: 0;\r\n}\r\n\r\n.add-project:hover .add-project-btn-text {\r\n  transform: translateX(0);\r\n  opacity: 1;\r\n}\r\n\r\n.plus-sign img {\r\n  transition: 0.3s ease-in-out;\r\n  height: 32px;\r\n}\r\n\r\n.add-project:hover .plus-sign img {\r\n  transform: scale(1.1) rotate(90deg);\r\n}\r\n\r\n.add-project:active .plus-sign img {\r\n  transform: scale(1) rotate(90deg);\r\n}\r\n/*  */\r\n\r\n/* content: */\r\n.content {\r\n  flex-grow: 1;\r\n  display: flex;\r\n}\r\n/*  */\r\n\r\n/* sidebar: */\r\n.sidebar {\r\n  width: 300px;\r\n  background-color: rgb(228, 228, 228);\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.default-projects {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px 0;\r\n  gap: 10px;\r\n}\r\n\r\n.default-projects button {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  padding: 5px 15px;\r\n  border: none;\r\n  background-color: rgb(228, 228, 228);\r\n  transition: 0.15s ease-in-out;\r\n  height: 50px;\r\n}\r\n\r\n.default-projects button:hover {\r\n  filter: brightness(1.05);\r\n}\r\n\r\n.default-projects:before {\r\n  content: "";\r\n  position: absolute;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  bottom: 0;\r\n  height: 1px;\r\n  width: 80%; /* or 100px */\r\n  border-bottom: 1px solid rgb(190, 190, 190);\r\n}\r\n\r\n.default-projects .sidebar-project-title {\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.default-projects img {\r\n  height: 30px;\r\n  position: relative;\r\n  top: 1px;\r\n}\r\n\r\n.user-projects {\r\n  padding: 20px 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.user-project-container {\r\n  background-color: rgb(228, 228, 228);\r\n  transition: 0.1s ease-in-outl;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 40px;\r\n}\r\n\r\n.user-project-container:hover {\r\n  filter: brightness(1.05);\r\n}\r\n\r\n.user-project-left {\r\n  height: 100%;\r\n  flex-grow: 1;\r\n}\r\n\r\n.user-project-button {\r\n  padding: 0 25px;\r\n  background: none;\r\n  border: none;\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.user-project-dot {\r\n  height: 10px;\r\n  width: 10px;\r\n  border-radius: 50px;\r\n  background-color: rgb(58, 58, 58);\r\n}\r\n\r\n.user-project-title {\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.user-project-right {\r\n  padding-right: 25px;\r\n}\r\n\r\n.delete-project {\r\n  transition: 0.15s ease-in-out;\r\n  background: none;\r\n  border: none;\r\n}\r\n\r\n.delete-project:hover {\r\n  color: red;\r\n}\r\n\r\n.main {\r\n  flex-grow: 1;\r\n  background-color: rgb(246, 246, 246);\r\n  padding: 20px;\r\n}\r\n\r\n.current-project-title {\r\n  font-size: 1.5rem;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.add-task-button {\r\n  transition: 0.1s ease-in-out;\r\n  padding: 0 5px;\r\n  height: 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border: none;\r\n}\r\n\r\n.add-task-button:active {\r\n  transform: scale(0.97);\r\n}\r\n\r\n.add-task-icon img {\r\n  transition: 0.2s ease-in-out;\r\n  position: relative;\r\n  top: 2px;\r\n  height: 22px;\r\n}\r\n\r\n.add-task-button:hover .add-task-icon img {\r\n  transform: translateX(-5%);\r\n}\r\n\r\n.add-task-button-text {\r\n  transition: 0.2s ease-in-out;\r\n  transform: translateX(-5%);\r\n  opacity: 0;\r\n}\r\n\r\n.add-task-button:hover .add-task-button-text {\r\n  transform: translateX(0);\r\n  opacity: 1;\r\n}\r\n\r\n.add-task-button-container {\r\n  display: none;\r\n}\r\n\r\n.add-task-button-container.active {\r\n  display: block;\r\n  position: relative;\r\n}\r\n\r\n.tasks-container {\r\n  position: relative;\r\n  margin-top: 20px;\r\n}\r\n\r\n.tasks-container:before {\r\n  position: absolute;\r\n  content: "";\r\n  border-top: 1px solid rgb(190, 190, 190);\r\n  left: 50%;\r\n  top: -5px;\r\n  transform: translate(-50%, -50%);\r\n  height: 1px;\r\n  width: 100%;\r\n}\r\n\r\n.task {\r\n  transition: all 0.15s ease-in-out;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  padding: 0 20px;\r\n  background-color: rgb(246, 246, 246);\r\n  min-height: 35px;\r\n}\r\n\r\n.task.active {\r\n  min-height: 100px;\r\n}\r\n\r\n.task:hover {\r\n  filter: brightness(0.96);\r\n}\r\n\r\n.task.complete {\r\n  color: grey;\r\n}\r\n\r\n.task-left {\r\n  position: relative;\r\n  top: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\ninput[type="checkbox"] {\r\n  flex-shrink: 0;\r\n  cursor: pointer;\r\n  position: relative;\r\n  appearance: none;\r\n  transition: all 0.3s ease;\r\n  height: 20px;\r\n  width: 20px;\r\n  &:after {\r\n    position: absolute;\r\n    content: "";\r\n    border-bottom: 1px solid;\r\n    width: 8px;\r\n    height: 0px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    animation: unchecked 0.1s ease-in;\r\n  }\r\n}\r\n\r\n@keyframes unchecked {\r\n  0% {\r\n    border-bottom: solid 1px green;\r\n    border-left: solid 1px green;\r\n    height: 4px;\r\n    width: 10px;\r\n    top: 40%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) rotate(-45deg);\r\n  }\r\n\r\n  100% {\r\n    border-bottom: 1px solid;\r\n    width: 5px;\r\n    height: 0px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n}\r\n\r\ninput[type="checkbox"]:checked:after {\r\n  height: 0px;\r\n  border-bottom: solid 1px;\r\n  border-left: solid 1px;\r\n  animation: checked 0.3s ease-in forwards;\r\n}\r\n\r\n@keyframes checked {\r\n  25% {\r\n    left: 100%;\r\n    width: 1px;\r\n    transform: translate(-50%, -50%) rotate(0);\r\n  }\r\n\r\n  50% {\r\n    height: 0;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) rotate(0);\r\n  }\r\n\r\n  66% {\r\n    top: 50%;\r\n  }\r\n\r\n  100% {\r\n    border-bottom: solid 1px green;\r\n    border-left: solid 1px green;\r\n    height: 4px;\r\n    width: 10px;\r\n    top: 40%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) rotate(-45deg);\r\n  }\r\n}\r\n\r\nlabel {\r\n  position: relative;\r\n  cursor: pointer;\r\n  flex-shrink: 0;\r\n}\r\n\r\ninput[type="checkbox"]:checked + label {\r\n  animation: marked 0.2s ease-in forwards;\r\n}\r\n\r\ninput[type="checkbox"]:checked + label:before {\r\n  position: absolute;\r\n  content: "";\r\n  width: 0;\r\n  left: -10%;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  border-bottom: 1px solid;\r\n  animation: cross 0.2s ease-in forwards;\r\n}\r\n\r\n@keyframes marked {\r\n  25% {\r\n    left: 0;\r\n  }\r\n\r\n  50% {\r\n    left: 15px;\r\n  }\r\n\r\n  100% {\r\n    left: 0;\r\n  }\r\n}\r\n\r\n@keyframes cross {\r\n  25% {\r\n    width: 0;\r\n  }\r\n  100% {\r\n    left: 0;\r\n    width: 100%;\r\n    border: 1px solid grey;\r\n  }\r\n}\r\n\r\n.task-description {\r\n  transition: all 0.15s ease-in-out;\r\n  position: relative;\r\n  top: 7px;\r\n  min-height: 20px;\r\n  width: 25%;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  cursor: pointer;\r\n}\r\n\r\n.task-description.active {\r\n  white-space: normal;\r\n  overflow-y: scroll;\r\n  text-overflow: ellipsis;\r\n  min-height: 80px;\r\n}\r\n\r\n.task-right {\r\n  position: relative;\r\n  top: 7px;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.task-date {\r\n  position: relative;\r\n  top: 2px;\r\n  background: transparent;\r\n  border: none;\r\n  min-width: 100px;\r\n  height: 18px;\r\n  padding: 0 5px;\r\n  border-right: 1px solid;\r\n  border-left: 1px solid;\r\n}\r\n\r\n.delete-task-button {\r\n  padding: 0;\r\n  margin: 0;\r\n  background: none;\r\n  border: none;\r\n}\r\n\r\n.delete-task-button img {\r\n  transition: all 0.2s ease-in-out;\r\n  position: relative;\r\n  top: 1.2px;\r\n  height: 20px;\r\n  filter: invert(0.5) sepia(1) hue-rotate(-40deg) saturate(500%);\r\n}\r\n\r\n.delete-task-button:hover img {\r\n  transform: scale(1.1);\r\n}\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");\r\n\r\n* {\r\n  font-family: "Roboto", sans-serif;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  height: 100vh;\r\n}\r\n\r\n.project-form-layout,\r\n.project-form,\r\n.task-form-layout,\r\n.task-form {\r\n  transition: all 0.2s ease-in-out;\r\n  display: none;\r\n}\r\n\r\n.project-form-layout.rendered {\r\n  z-index: 1;\r\n  display: block;\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  backdrop-filter: blur(5px);\r\n  opacity: 0;\r\n}\r\n\r\n.project-form-layout.active {\r\n  opacity: 1;\r\n}\r\n\r\n.project-form.rendered {\r\n  z-index: 2;\r\n  position: absolute;\r\n  top: 20%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%) scale(0);\r\n  background-color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 5px;\r\n  box-shadow: 0 0 5px 0 grey;\r\n  border-radius: 15px;\r\n  height: 90px;\r\n  width: 265px;\r\n  padding: 10px 20px;\r\n}\r\n\r\n.project-form.active {\r\n  transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n.project-form input[type="text"] {\r\n  text-align: center;\r\n  border: none;\r\n  height: 30px;\r\n  font-size: 1rem;\r\n  width: 100%;\r\n  outline: none;\r\n}\r\n\r\n.project-form input[type="text"]:focus::placeholder,\r\n.task-form input[type="text"]:focus::placeholder,\r\n.task-form textarea:focus::placeholder {\r\n  color: transparent;\r\n}\r\n\r\n.project-form button,\r\n.task-form button {\r\n  transition: all 0.1s ease-in-out;\r\n  border: none;\r\n  font-size: 1rem;\r\n  background: rgb(234, 234, 234);\r\n  color: rgb(124, 124, 124);\r\n  border-radius: 50px;\r\n  padding: 5px 15px;\r\n}\r\n\r\n.project-form button:hover,\r\n.task-form button:hover {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.task-form-layout.rendered {\r\n  z-index: 1;\r\n  display: block;\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  backdrop-filter: blur(5px);\r\n  opacity: 0;\r\n}\r\n\r\n.task-form-layout.active {\r\n  opacity: 1;\r\n}\r\n\r\n.task-form.rendered {\r\n  z-index: 2;\r\n  position: absolute;\r\n  top: 20%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%) scale(0);\r\n  background-color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 10px;\r\n  box-shadow: 0 0 5px 0 grey;\r\n  border-radius: 15px;\r\n  height: 200px;\r\n  width: 290px;\r\n  padding: 15px;\r\n}\r\n\r\n.task-form.active {\r\n  transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n.task-form input[type="text"] {\r\n  width: 100%;\r\n  height: 2.5rem;\r\n  margin: 0;\r\n  padding: 0 10px;\r\n  border-radius: 10px;\r\n  font-size: 1rem;\r\n  text-align: center;\r\n  border: none;\r\n  outline: none;\r\n}\r\n\r\n.task-form textarea {\r\n  flex-grow: 1;\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 5px;\r\n  resize: none;\r\n  border-radius: 10px;\r\n  font-size: 0.9rem;\r\n  border: none;\r\n  outline: none;\r\n  text-align: center;\r\n}\r\n\r\n.wrapper {\r\n  box-shadow: 0 0 15px 1px rgb(189, 189, 189);\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-width: 1100px;\r\n  margin-inline: auto;\r\n}\r\n\r\n/* header: */\r\n.header {\r\n  padding: 0 15px;\r\n  height: 60px;\r\n  background-color: rgb(58, 58, 58);\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.logo-button {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 8px;\r\n  background-color: transparent;\r\n  border: none;\r\n}\r\n\r\n.logo-button h1 {\r\n  color: rgb(238, 238, 238);\r\n  font-size: 1.6rem;\r\n  margin: 0;\r\n}\r\n\r\n.header-left img {\r\n  height: 32px;\r\n}\r\n\r\n.add-project {\r\n  border: none;\r\n  transition: 0.3s ease-in-out;\r\n  background-color: transparent;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.add-project-btn-text-container {\r\n  overflow: hidden;\r\n}\r\n\r\n.add-project-btn-text {\r\n  padding-right: 8px;\r\n  transition: 0.3s ease-in-out;\r\n  font-size: 1rem;\r\n  color: rgb(238, 238, 238);\r\n  transform: translateX(20%);\r\n  opacity: 0;\r\n}\r\n\r\n.add-project:hover .add-project-btn-text {\r\n  transform: translateX(0);\r\n  opacity: 1;\r\n}\r\n\r\n.plus-sign img {\r\n  transition: 0.3s ease-in-out;\r\n  height: 32px;\r\n}\r\n\r\n.add-project:hover .plus-sign img {\r\n  transform: scale(1.1) rotate(90deg);\r\n}\r\n\r\n.add-project:active .plus-sign img {\r\n  transform: scale(1) rotate(90deg);\r\n}\r\n/*  */\r\n\r\n/* content: */\r\n.content {\r\n  flex-grow: 1;\r\n  display: flex;\r\n}\r\n/*  */\r\n\r\n/* sidebar: */\r\n.sidebar {\r\n  width: 300px;\r\n  background-color: rgb(228, 228, 228);\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.default-projects {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px 0;\r\n  gap: 10px;\r\n}\r\n\r\n.default-projects button {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  padding: 5px 15px;\r\n  border: none;\r\n  background-color: rgb(228, 228, 228);\r\n  transition: 0.15s ease-in-out;\r\n  height: 50px;\r\n}\r\n\r\n.default-projects button:hover {\r\n  filter: brightness(1.05);\r\n}\r\n\r\n.default-projects:before {\r\n  content: "";\r\n  position: absolute;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  bottom: 0;\r\n  height: 1px;\r\n  width: 80%; /* or 100px */\r\n  border-bottom: 1px solid rgb(190, 190, 190);\r\n}\r\n\r\n.default-projects .sidebar-project-title {\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.default-projects img {\r\n  height: 30px;\r\n  position: relative;\r\n  top: 1px;\r\n}\r\n\r\n.user-projects {\r\n  padding: 20px 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.user-project-container {\r\n  background-color: rgb(228, 228, 228);\r\n  transition: 0.1s ease-in-outl;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 40px;\r\n}\r\n\r\n.user-project-container:hover {\r\n  filter: brightness(1.05);\r\n}\r\n\r\n.user-project-left {\r\n  height: 100%;\r\n  flex-grow: 1;\r\n}\r\n\r\n.user-project-button {\r\n  padding: 0 25px;\r\n  background: none;\r\n  border: none;\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.user-project-dot {\r\n  height: 10px;\r\n  width: 10px;\r\n  border-radius: 50px;\r\n  background-color: rgb(58, 58, 58);\r\n}\r\n\r\n.user-project-title {\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.user-project-right {\r\n  padding-right: 25px;\r\n}\r\n\r\n.delete-project {\r\n  transition: 0.15s ease-in-out;\r\n  background: none;\r\n  border: none;\r\n}\r\n\r\n.delete-project:hover {\r\n  color: red;\r\n}\r\n\r\n.main {\r\n  flex-grow: 1;\r\n  background-color: rgb(246, 246, 246);\r\n  padding: 20px;\r\n}\r\n\r\n.current-project-title {\r\n  font-size: 1.5rem;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.add-task-button {\r\n  transition: 0.1s ease-in-out;\r\n  padding: 0 5px;\r\n  height: 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border: none;\r\n}\r\n\r\n.add-task-button:active {\r\n  transform: scale(0.97);\r\n}\r\n\r\n.add-task-icon img {\r\n  transition: 0.2s ease-in-out;\r\n  position: relative;\r\n  top: 2px;\r\n  height: 22px;\r\n}\r\n\r\n.add-task-button:hover .add-task-icon img {\r\n  transform: translateX(-5%);\r\n}\r\n\r\n.add-task-button-text {\r\n  transition: 0.2s ease-in-out;\r\n  transform: translateX(-5%);\r\n  opacity: 0;\r\n}\r\n\r\n.add-task-button:hover .add-task-button-text {\r\n  transform: translateX(0);\r\n  opacity: 1;\r\n}\r\n\r\n.add-task-button-container {\r\n  display: none;\r\n}\r\n\r\n.add-task-button-container.active {\r\n  display: block;\r\n  position: relative;\r\n}\r\n\r\n.tasks-container {\r\n  position: relative;\r\n  margin-top: 20px;\r\n}\r\n\r\n.tasks-container:before {\r\n  position: absolute;\r\n  content: "";\r\n  border-top: 1px solid rgb(190, 190, 190);\r\n  left: 50%;\r\n  top: -5px;\r\n  transform: translate(-50%, -50%);\r\n  height: 1px;\r\n  width: 100%;\r\n}\r\n\r\n.task {\r\n  transition: all 0.15s ease-in-out;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  padding: 0 20px;\r\n  background-color: rgb(246, 246, 246);\r\n  min-height: 35px;\r\n}\r\n\r\n.task.active {\r\n  min-height: 100px;\r\n}\r\n\r\n.task:hover {\r\n  filter: brightness(0.96);\r\n}\r\n\r\n.task.complete {\r\n  color: grey;\r\n}\r\n\r\n.task-left {\r\n  position: relative;\r\n  top: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\ninput[type="checkbox"] {\r\n  flex-shrink: 0;\r\n  cursor: pointer;\r\n  position: relative;\r\n  appearance: none;\r\n  transition: all 0.3s ease;\r\n  height: 20px;\r\n  width: 20px;\r\n  &:after {\r\n    position: absolute;\r\n    content: "";\r\n    border-bottom: 1px solid;\r\n    width: 8px;\r\n    height: 0px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    animation: unchecked 0.1s ease-in;\r\n  }\r\n}\r\n\r\n@keyframes unchecked {\r\n  0% {\r\n    border-bottom: solid 1px green;\r\n    border-left: solid 1px green;\r\n    height: 4px;\r\n    width: 10px;\r\n    top: 40%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) rotate(-45deg);\r\n  }\r\n\r\n  100% {\r\n    border-bottom: 1px solid;\r\n    width: 5px;\r\n    height: 0px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n}\r\n\r\ninput[type="checkbox"]:checked:after {\r\n  height: 0px;\r\n  border-bottom: solid 1px;\r\n  border-left: solid 1px;\r\n  animation: checked 0.3s ease-in forwards;\r\n}\r\n\r\n@keyframes checked {\r\n  25% {\r\n    left: 100%;\r\n    width: 1px;\r\n    transform: translate(-50%, -50%) rotate(0);\r\n  }\r\n\r\n  50% {\r\n    height: 0;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) rotate(0);\r\n  }\r\n\r\n  66% {\r\n    top: 50%;\r\n  }\r\n\r\n  100% {\r\n    border-bottom: solid 1px green;\r\n    border-left: solid 1px green;\r\n    height: 4px;\r\n    width: 10px;\r\n    top: 40%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) rotate(-45deg);\r\n  }\r\n}\r\n\r\nlabel {\r\n  position: relative;\r\n  cursor: pointer;\r\n  flex-shrink: 0;\r\n}\r\n\r\ninput[type="checkbox"]:checked + label {\r\n  animation: marked 0.2s ease-in forwards;\r\n}\r\n\r\ninput[type="checkbox"]:checked + label:before {\r\n  position: absolute;\r\n  content: "";\r\n  width: 0;\r\n  left: -10%;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  border-bottom: 1px solid;\r\n  animation: cross 0.2s ease-in forwards;\r\n}\r\n\r\n@keyframes marked {\r\n  25% {\r\n    left: 0;\r\n  }\r\n\r\n  50% {\r\n    left: 15px;\r\n  }\r\n\r\n  100% {\r\n    left: 0;\r\n  }\r\n}\r\n\r\n@keyframes cross {\r\n  25% {\r\n    width: 0;\r\n  }\r\n  100% {\r\n    left: 0;\r\n    width: 100%;\r\n    border: 1px solid grey;\r\n  }\r\n}\r\n\r\n.task-description {\r\n  transition: all 0.15s ease-in-out;\r\n  position: relative;\r\n  top: 7px;\r\n  min-height: 20px;\r\n  width: 25%;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  cursor: pointer;\r\n}\r\n\r\n.task-description.active {\r\n  white-space: normal;\r\n  overflow-y: scroll;\r\n  text-overflow: ellipsis;\r\n  min-height: 80px;\r\n}\r\n\r\n.task-right {\r\n  position: relative;\r\n  top: 7px;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.task-date {\r\n  position: relative;\r\n  top: 2px;\r\n  background: transparent;\r\n  border: none;\r\n  min-width: 100px;\r\n  height: 18px;\r\n  padding: 0 5px;\r\n  border-right: 1px solid;\r\n  border-left: 1px solid;\r\n}\r\n\r\n.delete-task-button {\r\n  padding: 0;\r\n  margin: 0;\r\n  background: none;\r\n  border: none;\r\n}\r\n\r\n.delete-task-button img {\r\n  transition: all 0.2s ease-in-out;\r\n  position: relative;\r\n  top: 1.2px;\r\n  height: 20px;\r\n  filter: invert(0.5) sepia(1) hue-rotate(-40deg) saturate(500%);\r\n}\r\n\r\n.delete-task-button:hover img {\r\n  transform: scale(1.1);\r\n}\r\n'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],d=r.base?c[0]+r.base:c[0],l=o[d]||0,A="".concat(d," ").concat(l);o[d]=l+1;var u=n(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=a(p,r);r.byIndex=s,t.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=n(o[i]);t[s].references--}for(var c=r(e,a),d=0;d<o.length;d++){var l=n(o[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!e;)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function r(n){t(1,arguments);var r=Object.prototype.toString.call(n);return n instanceof Date||"object"===e(n)&&"[object Date]"===r?new Date(n.getTime()):"number"==typeof n||"[object Number]"===r?new Date(n):("string"!=typeof n&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function o(e){t(1,arguments);var n=r(e),a=n.getUTCDay(),o=(a<1?7:0)+a-1;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function i(e){t(1,arguments);var n=r(e),a=n.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(a+1,0,4),i.setUTCHours(0,0,0,0);var s=o(i),c=new Date(0);c.setUTCFullYear(a,0,4),c.setUTCHours(0,0,0,0);var d=o(c);return n.getTime()>=s.getTime()?a+1:n.getTime()>=d.getTime()?a:a-1}var s={};function c(){return s}function d(e,n){var o,i,s,d,l,A,u,p;t(1,arguments);var m=c(),f=a(null!==(o=null!==(i=null!==(s=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(l=n.locale)||void 0===l||null===(A=l.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==s?s:m.weekStartsOn)&&void 0!==i?i:null===(u=m.locale)||void 0===u||null===(p=u.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==o?o:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=r(e),g=h.getUTCDay(),C=(g<f?7:0)+g-f;return h.setUTCDate(h.getUTCDate()-C),h.setUTCHours(0,0,0,0),h}function l(e,n){var o,i,s,l,A,u,p,m;t(1,arguments);var f=r(e),h=f.getUTCFullYear(),g=c(),C=a(null!==(o=null!==(i=null!==(s=null!==(l=null==n?void 0:n.firstWeekContainsDate)&&void 0!==l?l:null==n||null===(A=n.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:g.firstWeekContainsDate)&&void 0!==i?i:null===(p=g.locale)||void 0===p||null===(m=p.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==o?o:1);if(!(C>=1&&C<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var E=new Date(0);E.setUTCFullYear(h+1,0,C),E.setUTCHours(0,0,0,0);var b=d(E,n),v=new Date(0);v.setUTCFullYear(h,0,C),v.setUTCHours(0,0,0,0);var x=d(v,n);return f.getTime()>=b.getTime()?h+1:f.getTime()>=x.getTime()?h:h-1}function A(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const u=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return A("yy"===t?r%100:r,t.length)},p=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):A(n+1,2)},m=function(e,t){return A(e.getUTCDate(),t.length)},f=function(e,t){return A(e.getUTCHours()%12||12,t.length)},h=function(e,t){return A(e.getUTCHours(),t.length)},g=function(e,t){return A(e.getUTCMinutes(),t.length)},C=function(e,t){return A(e.getUTCSeconds(),t.length)},E=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return A(Math.floor(r*Math.pow(10,n-3)),t.length)};var b={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return u(e,t)},Y:function(e,t,n,r){var a=l(e,r),o=a>0?a:1-a;return"YY"===t?A(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):A(o,t.length)},R:function(e,t){return A(i(e),t.length)},u:function(e,t){return A(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return A(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return A(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return p(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return A(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,o,i){var s=function(e,n){t(1,arguments);var o=r(e),i=d(o,n).getTime()-function(e,n){var r,o,i,s,A,u,p,m;t(1,arguments);var f=c(),h=a(null!==(r=null!==(o=null!==(i=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(A=n.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==i?i:f.firstWeekContainsDate)&&void 0!==o?o:null===(p=f.locale)||void 0===p||null===(m=p.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==r?r:1),g=l(e,n),C=new Date(0);return C.setUTCFullYear(g,0,h),C.setUTCHours(0,0,0,0),d(C,n)}(o,n).getTime();return Math.round(i/6048e5)+1}(e,i);return"wo"===n?o.ordinalNumber(s,{unit:"week"}):A(s,n.length)},I:function(e,n,a){var s=function(e){t(1,arguments);var n=r(e),a=o(n).getTime()-function(e){t(1,arguments);var n=i(e),r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),o(r)}(n).getTime();return Math.round(a/6048e5)+1}(e);return"Io"===n?a.ordinalNumber(s,{unit:"week"}):A(s,n.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):m(e,t)},D:function(e,n,a){var o=function(e){t(1,arguments);var n=r(e),a=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var o=a-n.getTime();return Math.floor(o/864e5)+1}(e);return"Do"===n?a.ordinalNumber(o,{unit:"dayOfYear"}):A(o,n.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return A(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return A(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return A(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return f(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):h(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):A(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):A(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):g(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):C(e,t)},S:function(e,t){return E(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return x(a);case"XXXX":case"XX":return k(a);default:return k(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return x(a);case"xxxx":case"xx":return k(a);default:return k(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+v(a,":");default:return"GMT"+k(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+v(a,":");default:return"GMT"+k(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return A(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return A((r._originalDate||e).getTime(),t.length)}};function v(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+A(o,2)}function x(e,t){return e%60==0?(e>0?"-":"+")+A(Math.abs(e)/60,2):k(e,t)}function k(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+A(Math.floor(a/60),2)+n+A(a%60,2)}const B=b;var y=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},w=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const j={p:w,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return y(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",y(a,t)).replace("{{time}}",w(o,t))}};var T=["D","DD"],L=["YY","YYYY"];function S(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var P={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Y(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const U={date:Y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var D={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function W(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[s]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const O={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:W({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:W({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:W({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:W({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:W({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function M(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,s=o[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(c)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(c):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(c);return i=e.valueCallback?e.valueCallback(d):d,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(s.length)}}}var I,N={ordinalNumber:(I={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(I.matchPattern);if(!n)return null;var r=n[0],a=e.match(I.parsePattern);if(!a)return null;var o=I.valueCallback?I.valueCallback(a[0]):a[0];return{value:o=t.valueCallback?t.valueCallback(o):o,rest:e.slice(r.length)}}),era:M({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:M({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:M({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:M({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:M({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const q={code:"en-US",formatDistance:function(e,t,n){var r,a=P[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:U,formatRelative:function(e,t,n,r){return D[e]},localize:O,match:N,options:{weekStartsOn:0,firstWeekContainsDate:1}};var Q=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,z=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,X=/^'([^]*?)'?$/,Z=/''/g,R=/[a-zA-Z]/;function F(n,o,i){var s,d,l,A,u,p,m,f,h,g,C,E,b,v,x,k,y,w;t(2,arguments);var P=String(o),Y=c(),U=null!==(s=null!==(d=null==i?void 0:i.locale)&&void 0!==d?d:Y.locale)&&void 0!==s?s:q,D=a(null!==(l=null!==(A=null!==(u=null!==(p=null==i?void 0:i.firstWeekContainsDate)&&void 0!==p?p:null==i||null===(m=i.locale)||void 0===m||null===(f=m.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==u?u:Y.firstWeekContainsDate)&&void 0!==A?A:null===(h=Y.locale)||void 0===h||null===(g=h.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==l?l:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var W=a(null!==(C=null!==(E=null!==(b=null!==(v=null==i?void 0:i.weekStartsOn)&&void 0!==v?v:null==i||null===(x=i.locale)||void 0===x||null===(k=x.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==b?b:Y.weekStartsOn)&&void 0!==E?E:null===(y=Y.locale)||void 0===y||null===(w=y.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==C?C:0);if(!(W>=0&&W<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!U.localize)throw new RangeError("locale must contain localize property");if(!U.formatLong)throw new RangeError("locale must contain formatLong property");var O=r(n);if(!function(n){if(t(1,arguments),!function(n){return t(1,arguments),n instanceof Date||"object"===e(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var a=r(n);return!isNaN(Number(a))}(O))throw new RangeError("Invalid time value");var M=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(O),I=function(e,n){return t(2,arguments),function(e,n){t(2,arguments);var o=r(e).getTime(),i=a(n);return new Date(o+i)}(e,-a(n))}(O,M),N={firstWeekContainsDate:D,weekStartsOn:W,locale:U,_originalDate:O};return P.match(z).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,j[t])(e,U.formatLong):e})).join("").match(Q).map((function(e){if("''"===e)return"'";var t,r,a=e[0];if("'"===a)return(r=(t=e).match(X))?r[1].replace(Z,"'"):t;var s,c=B[a];if(c)return null!=i&&i.useAdditionalWeekYearTokens||(s=e,-1===L.indexOf(s))||S(e,o,String(n)),null!=i&&i.useAdditionalDayOfYearTokens||!function(e){return-1!==T.indexOf(e)}(e)||S(e,o,String(n)),c(I,e,U.localize,N);if(a.match(R))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return e})).join("")}class H{constructor(e,t,n,r,a){this.title=e,this.description=t,this.date=n,this.project=r,this.completed=a}}class J{constructor(e){this.projectTitle=e,this.taskList=[]}addTask(e,t,n,r,a){const o=new H(e,t,n,r,a);this.taskList.push(o)}}class V{constructor(){this.defaultProjects=[new J("Inbox"),new J("Today"),new J("This week")],this.userProjects=[]}addProject(e){const t=new J(e);this.userProjects.push(t)}}const G=n.p+"32652151fd21e0530073.png",$=n.p+"bdfe81ee4445a0ecf092.png",_=n.p+"939f2a757e3335be71bb.svg",K=n.p+"233385e32206cd372d69.svg",ee=n.p+"518ff47ec29e1552eabd.svg",te=n.p+"378dacad5886df7eb57d.svg",ne=n.p+"bcf8d6ff346603c8a51a.svg";var re=n(379),ae=n.n(re),oe=n(795),ie=n.n(oe),se=n(569),ce=n.n(se),de=n(565),le=n.n(de),Ae=n(216),ue=n.n(Ae),pe=n(589),me=n.n(pe),fe=n(426),he={};he.styleTagTransform=me(),he.setAttributes=le(),he.insert=ce().bind(null,"head"),he.domAPI=ie(),he.insertStyleElement=ue(),ae()(fe.Z,he),fe.Z&&fe.Z.locals&&fe.Z.locals;class ge{static loadHomePage(){ge.createContainerObject(),ge.createStorage(),ge.createProjectForm(),ge.createTaskForm(),ge.createHeader(),ge.createContent(),ge.loadInbox()}static createContainerObject(){const e=new V;ge.containerObject=e}static createStorage(){localStorage.getItem("inbox")||(localStorage.setItem("inbox",JSON.stringify(ge.containerObject.defaultProjects[0].taskList)),console.log("yes"));const e=JSON.parse(localStorage.getItem("inbox"));ge.containerObject.defaultProjects[0].taskList=e,localStorage.getItem("projects")||localStorage.setItem("projects",JSON.stringify([]));const t=JSON.parse(localStorage.getItem("projects"));if(t.length>0)for(let e=0;e<t.length;e++)ge.containerObject.addProject(t[e].projectTitle),ge.containerObject.userProjects[e].taskList=t[e].taskList}static createHeader(){const e=document.body,t=document.createElement("div");t.classList.add("wrapper"),e.appendChild(t);const n=document.createElement("header");n.classList.add("header"),t.appendChild(n);const r=document.createElement("div");r.classList.add("header-left"),n.appendChild(r);const a=document.createElement("button");a.classList.add("logo-button"),r.appendChild(a);const o=document.createElement("img");o.classList.add("logo"),o.setAttribute("src",G),a.appendChild(o);const i=document.createElement("h1");i.classList.add("logo-text"),i.textContent="ToDo",a.appendChild(i);const s=document.createElement("div");s.classList.add("header-right"),n.appendChild(s);const c=document.createElement("button");c.classList.add("add-project"),c.removeEventListener("click",ge.addProject),c.addEventListener("click",ge.addProject),s.appendChild(c);const d=document.createElement("div");d.classList.add("add-project-btn-text-container"),c.appendChild(d);const l=document.createElement("div");l.classList.add("add-project-btn-text"),l.textContent="Add Project",d.appendChild(l);const A=document.createElement("span");A.classList.add("plus-sign"),c.appendChild(A);const u=document.createElement("img");u.classList.add("add-project-img"),u.setAttribute("src",$),A.appendChild(u)}static createContent(){const e=document.querySelector(".wrapper"),t=document.createElement("div");t.classList.add("content"),e.appendChild(t),function(){const e=document.querySelector(".content"),t=document.createElement("div");t.classList.add("sidebar"),e.appendChild(t);const n=document.createElement("div");n.classList.add("default-projects"),t.appendChild(n);const r=document.createElement("div");r.classList.add("user-projects"),t.appendChild(r),function(){const e=document.querySelector(".default-projects");for(let t of ge.containerObject.defaultProjects){const n=document.createElement("button");n.setAttribute("id","default"),n.classList.add("sidebar-default-project"),n.classList.add(t.projectTitle.replace(/\s/g,"-").toLowerCase()),e.appendChild(n);const r=document.createElement("div");r.classList.add("sidebar-project-icon"),n.appendChild(r);const a=document.createElement("img");r.appendChild(a);const o=document.createElement("div");o.classList.add("sidebar-project-title"),o.textContent=`${t.projectTitle}`,n.appendChild(o)}const t=document.querySelector(".sidebar-default-project.inbox");t.removeEventListener("click",ge.getTaskList),t.addEventListener("click",ge.getTaskList);const n=document.querySelector(".sidebar-default-project.today");n.removeEventListener("click",ge.getTodayTasks),n.addEventListener("click",ge.getTodayTasks);const r=document.querySelector(".sidebar-default-project.this-week");r.removeEventListener("click",ge.getThisWeekTasks),r.addEventListener("click",ge.getThisWeekTasks),document.querySelector(".default-projects .inbox img").setAttribute("src",_),document.querySelector(".default-projects .today img").setAttribute("src",K),document.querySelector(".default-projects .this-week img").setAttribute("src",ee)}(),ge.updateUserProjectButtons()}(),function(){const e=document.querySelector(".content"),t=document.createElement("div");t.classList.add("main"),e.appendChild(t);const n=document.createElement("div");n.classList.add("current-project-title"),t.appendChild(n);const r=document.createElement("div");r.classList.add("add-task-button-container"),r.classList.add("active"),t.appendChild(r);const a=document.createElement("button");a.classList.add("add-task-button"),a.removeEventListener("click",ge.addTask),a.addEventListener("click",ge.addTask),r.appendChild(a);const o=document.createElement("span");o.classList.add("add-task-icon"),a.appendChild(o);const i=document.createElement("img");i.setAttribute("src",te),o.appendChild(i);const s=document.createElement("div");s.classList.add("add-task-text-container"),a.appendChild(s);const c=document.createElement("div");c.classList.add("add-task-button-text"),c.textContent="Add Task",s.appendChild(c);const d=document.createElement("div");d.classList.add("tasks-container"),t.appendChild(d)}()}static createProjectForm(){const e=document.body,t=document.createElement("div");t.classList.add("project-form-layout"),t.removeEventListener("click",(()=>{n.classList.remove("rendered"),n.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active")})),t.addEventListener("click",(()=>{n.classList.remove("rendered"),n.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active")})),e.appendChild(t);const n=document.createElement("form");n.classList.add("project-form"),n.setAttribute("action","#"),n.setAttribute("method","get"),n.removeEventListener("submit",(e=>{e.preventDefault()})),n.addEventListener("submit",(e=>{e.preventDefault()})),e.appendChild(n);const r=document.createElement("input");r.classList.add("project-title-input"),r.setAttribute("type","text"),r.setAttribute("placeholder","Project Title"),r.setAttribute("maxlength","15"),n.appendChild(r);const a=document.createElement("button");a.removeEventListener("click",ge.submitProject),a.addEventListener("click",ge.submitProject),a.setAttribute("type","submit"),a.classList.add("submit-project-button"),a.textContent="Create",n.appendChild(a)}static submitProject(){const e=document.querySelector(".project-form"),t=document.querySelector(".project-form-layout");e.classList.remove("rendered"),e.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active");const n=document.querySelector(".project-title-input"),r=n.value;if(ge.containerObject.userProjects.find((e=>e.projectTitle===r)))return alert("Name already used"),void ge.addProject();if(null===r||""===r)return;ge.containerObject.addProject(r);const a=ge.containerObject.userProjects.find((e=>e.projectTitle===r));n.value="";const o=JSON.parse(localStorage.getItem("projects"));o.push(a),localStorage.setItem("projects",JSON.stringify(o)),ge.updateUserProjectButtons()}static addProject(){const e=document.querySelector(".project-form");e.classList.add("rendered");const t=document.querySelector(".project-form-layout");t.classList.add("rendered"),setTimeout((function(){e.classList.add("active"),t.classList.add("active")}),1),document.querySelector(".project-title-input").focus()}static updateUserProjectButtons(){const e=document.querySelector(".user-projects");e.innerHTML="";const t=ge.containerObject.userProjects;for(let n of t){const t=document.createElement("div");t.classList.add("user-project-container"),e.appendChild(t);const r=document.createElement("div");r.classList.add("user-project-left"),t.appendChild(r);const a=document.createElement("button");a.classList.add("user-project-button"),a.removeEventListener("click",ge.getTaskList),a.addEventListener("click",ge.getTaskList),r.appendChild(a);const o=document.createElement("div");o.classList.add("user-project-dot"),a.appendChild(o);const i=document.createElement("div");i.classList.add("user-project-title"),i.textContent=n.projectTitle,a.appendChild(i);const s=document.createElement("div");s.classList.add("user-project-right"),t.appendChild(s);const c=document.createElement("button");c.classList.add("delete-project"),c.textContent="🞬",c.removeEventListener("click",ge.deleteProject),c.addEventListener("click",ge.deleteProject),s.appendChild(c)}}static deleteProject(e){const t=e.target.parentNode.parentNode.textContent.slice(0,-2),n=ge.containerObject.userProjects.find((e=>e.projectTitle===t)),r=ge.containerObject.userProjects.indexOf(n);if("delete"===prompt("Type 'delete' to delete project:","")){ge.containerObject.userProjects.splice(r,1);const e=JSON.parse(localStorage.getItem("projects"));e.splice(r,1),localStorage.setItem("projects",JSON.stringify(e)),ge.updateUserProjectButtons(),ge.findProject.projectTitle===t&&ge.loadInbox()}}static createTaskForm(){const e=document.body,t=document.createElement("div");t.classList.add("task-form-layout"),t.removeEventListener("click",(()=>{n.classList.remove("rendered"),n.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active")})),t.addEventListener("click",(()=>{n.classList.remove("rendered"),n.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active")})),e.appendChild(t);const n=document.createElement("form");n.classList.add("task-form"),n.setAttribute("action","#"),n.setAttribute("method","get"),n.removeEventListener("submit",(e=>{e.preventDefault()})),n.addEventListener("submit",(e=>{e.preventDefault()})),e.appendChild(n);const r=document.createElement("input");r.classList.add("task-title-input"),r.setAttribute("type","text"),r.setAttribute("maxlength","15"),r.setAttribute("placeholder","Task Title"),n.appendChild(r);const a=document.createElement("textarea");a.classList.add("task-description-input"),a.setAttribute("placeholder","Description.."),n.appendChild(a);const o=document.createElement("button");o.classList.add("submit-task-button"),o.setAttribute("type","submit"),o.textContent="Add Task",o.removeEventListener("click",ge.submitTask),o.addEventListener("click",ge.submitTask),n.appendChild(o)}static submitTask(){const e=document.querySelector(".task-form"),t=document.querySelector(".task-form-layout");e.classList.remove("rendered"),e.classList.remove("active"),t.classList.remove("rendered"),t.classList.remove("active");const n=document.querySelector(".task-title-input").value;if(null===n||""===n)return alert("Please fill a title"),void ge.addTask();if(n.length>15)return alert("Name too long, max length is 15 characters"),void ge.addTask();const r=document.querySelector(".task-description-input").value;let a=F(new Date,"PP"),o=ge.findProject.projectTitle;ge.findProject.addTask(n,r,a,o,"no"),ge.checkWeek(a)&&ge.containerObject.defaultProjects[2].addTask(n,r,a,o,"no"),document.querySelector(".task-title-input").value="",document.querySelector(".task-description-input").value="",ge.updateTaskList()}static getTaskList(e){const t=document.querySelector(".add-task-button-container");t.classList.contains("active")||t.classList.add("active");const n=e.currentTarget.parentNode.parentNode.classList.value,r=ge.containerObject.userProjects,a=ge.containerObject.defaultProjects;let o,i,s;o=n.includes("user")?r:a,o===r?(i=e.currentTarget.parentNode.parentNode.textContent,s=i.slice(0,-2)):s=e.currentTarget.textContent,ge.findProject=o.find((e=>e.projectTitle===s)),ge.updateTaskList()}static updateTaskList(){const e=ge.findProject.taskList;e.sort(ge.compareDates),document.querySelector(".current-project-title").textContent=ge.findProject.projectTitle;const t=document.querySelector(".tasks-container");t.innerHTML="";for(let n of e){const e=document.createElement("div");e.removeEventListener("click",ge.expandTask),e.addEventListener("click",ge.expandTask),e.classList.add("task"),t.appendChild(e);const r=document.createElement("div");r.classList.add("task-left"),e.appendChild(r);const a=document.createElement("input");a.classList.add("mark-task-complete"),a.setAttribute("type","checkbox"),a.setAttribute("id",`${n.title.replace(/\s/g,"")}`),"yes"===n.completed&&a.setAttribute("checked",""),a.removeEventListener("change",ge.completeTask),a.addEventListener("change",ge.completeTask),r.appendChild(a);const o=document.createElement("label");o.classList.add("task-title"),o.setAttribute("for",`${n.title.replace(/\s/g,"")}`),o.textContent=n.title,r.appendChild(o);const i=document.createElement("div");i.classList.add("task-description"),i.textContent=n.description,e.appendChild(i);const s=document.createElement("div");s.classList.add("task-right"),e.appendChild(s);const c=document.createElement("input");c.classList.add("task-date"),c.value=n.date,c.setAttribute("type","date");let d=(new Date).toISOString().split("T")[0];c.setAttribute("min",d),c.removeEventListener("change",ge.chooseDate),c.addEventListener("change",ge.chooseDate),s.appendChild(c);const l=document.createElement("button");l.removeEventListener("click",ge.deleteTask),l.addEventListener("click",ge.deleteTask),l.classList.add("delete-task-button"),s.appendChild(l);const A=document.createElement("img");A.setAttribute("src",ne),l.appendChild(A),"yes"===n.completed&&(e.classList.add("complete"),a.classList.add("active"))}localStorage.setItem("inbox",JSON.stringify(ge.containerObject.defaultProjects[0].taskList)),localStorage.setItem("projects",JSON.stringify(ge.containerObject.userProjects))}static completeTask(e){const t=e.target,n=e.target.parentNode.parentNode,r=n.querySelector(".task-title").textContent,a=ge.findProject.taskList.find((e=>e.title===r));t.checked?(console.log(a),console.log(t.checked+" checked!"),t.checked=!0,n.classList.add("complete"),a.completed="yes"):(console.log(t.checked+" unchecked!"),n.classList.remove("complete"),a.completed="no")}static expandTask(e){if("task-description"===e.target.classList.value){const t=e.target.parentNode,n=t.querySelector(".task-title"),r=t.querySelector(".task-description");t.classList.add("active"),n.classList.add("active"),r.classList.add("active")}else if("task-description active"===e.target.classList.value){const t=e.target.parentNode,n=t.querySelector(".task-title"),r=t.querySelector(".task-description");t.classList.remove("active"),n.classList.remove("active"),r.classList.remove("active")}}static addTask(){const e=document.querySelector(".task-form");e.classList.add("rendered");const t=document.querySelector(".task-form-layout");t.classList.add("rendered"),setTimeout((function(){e.classList.add("active"),t.classList.add("active")}),1),document.querySelector(".task-title-input").focus()}static chooseDate(e){console.log(e.target.parentNode.parentNode),console.log(e.target.value);const t=e.target.parentNode.parentNode.querySelector(".task-title").textContent,n=ge.findProject.taskList.find((e=>e.title===t));n.date=e.target.value,console.log(n),ge.updateTaskList()}static checkToday(e){if(F(new Date(e),"P")===F(new Date,"P"))return!0}static compareDates(e,t){const n=new Date(e.date),r=new Date(t.date);return n>r?1:n<r?-1:0}static getTodayTasks(){const e=document.querySelector(".add-task-button-container");e.classList.contains("active")&&e.classList.remove("active");const t=[],n=ge.containerObject.defaultProjects[0].taskList,r=ge.containerObject.userProjects;for(let e of r)e.taskList.forEach((e=>{ge.checkToday(e.date)&&t.push(e)}));n.forEach((e=>{ge.checkToday(e.date)&&t.push(e)})),ge.containerObject.defaultProjects[1].taskList=t,ge.findProject=ge.containerObject.defaultProjects[1],ge.updateTaskList()}static checkWeek(e){const n=F(new Date(e),"P"),o=F(function(e,n){var o,i,s,d,l,A,u,p;t(1,arguments);var m=c(),f=a(null!==(o=null!==(i=null!==(s=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(l=n.locale)||void 0===l||null===(A=l.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==s?s:m.weekStartsOn)&&void 0!==i?i:null===(u=m.locale)||void 0===u||null===(p=u.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==o?o:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=r(e),g=h.getDay(),C=(g<f?7:0)+g-f;return h.setDate(h.getDate()-C),h.setHours(0,0,0,0),h}(new Date),"P"),i=function(e,n){return t(2,arguments),function(e,n){t(2,arguments);var o=r(e),i=a(n);return isNaN(i)?new Date(NaN):i?(o.setDate(o.getDate()+i),o):o}(e,7*a(n))}(new Date(o),1),s=function(e,n){t(2,arguments);var a=r(e),o=r(n);return a.getTime()>o.getTime()}(new Date(i),new Date(n)),d=function(e,n){t(2,arguments);var a=r(e),o=r(n);return a.getTime()<o.getTime()}(new Date(n),new Date(o));if(!0===s&&!1===d)return!0}static getThisWeekTasks(){const e=document.querySelector(".add-task-button-container");e.classList.contains("active")&&e.classList.remove("active");const t=[],n=ge.containerObject.defaultProjects[0].taskList,r=ge.containerObject.userProjects;for(let e of r)e.taskList.forEach((e=>{ge.checkWeek(e.date)&&t.push(e)}));n.forEach((e=>{ge.checkWeek(e.date)&&t.push(e)})),t.sort(ge.compareDates),ge.containerObject.defaultProjects[2].taskList=t,ge.findProject=ge.containerObject.defaultProjects[2],ge.updateTaskList()}static deleteTask(e){const t=e.currentTarget.parentNode.parentNode.querySelector(".task-title").textContent,n=ge.findProject.taskList.find((e=>e.title===t)),r=ge.findProject.taskList.indexOf(n),a=ge.findProject.taskList[r].project;if("Inbox"===a){if("delete"!==prompt('Type "delete" to delete this task',""))return;ge.containerObject.defaultProjects[0].taskList.splice(r,1)}else"delete"===prompt('Type "delete" to delete this task',"")&&(ge.containerObject.defaultProjects[0].taskList.splice(r,1),ge.containerObject.userProjects.find((e=>e.projectTitle===a)).taskList.splice(r,1));"This week"!==ge.findProject.projectTitle&&"Today"!==ge.findProject.projectTitle||ge.findProject.taskList.splice(r,1),ge.updateTaskList()}static loadInbox(){ge.findProject=ge.containerObject.defaultProjects[0],ge.updateTaskList()}}document.addEventListener("DOMContentLoaded",ge.loadHomePage)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,